name: Build

on:
  push:
    tags:
      - "v*.*.*"  # Push events to matching v*, i.e. v1.0.0, v20.15.10

env:
  # Customize the CMake build type here (Release, Debug, RelWithDebInfo, etc.)
  BUILD_TYPE: Release
  # Customize the qt version ,qt_arch, msvc_arch here
  QT_VER: 6.5.2
  QT_HOST: windows
  QT_TARGET: desktop
  QT_ARCH: win64_msvc2019_64
  # Customize the target name here
  targetName: "Warcraft"

jobs:
  build:

    runs-on: windows-latest

    steps:

    - name: Checkout
      uses: actions/checkout@v4

    - name: Install Qt
      uses: jurplel/install-qt-action@v3
      with:
        version: ${{ env.QT_VER }}
        host: ${{ env.QT_HOST }}
        target: ${{ env.QT_TARGET }}
        arch: ${{ env.QT_ARCH }}
        install-deps: 'true'

    - name: Configure CMake
      # Configure CMake in a 'build' subdirectory.
      # `CMAKE_BUILD_TYPE` is only required if you are using a single-configuration generator such as make.
      # See https://cmake.org/cmake/help/latest/variable/CMAKE_BUILD_TYPE.html?highlight=cmake_build_type
      run: cmake -DCMAKE_BUILD_TYPE=${{ env.BUILD_TYPE }} -B '${{ github.workspace }}/build'
    
    - name: Build
      # Build your program with the given configuration
      run: cmake --build '${{github.workspace}}/build' -v --config ${{ env.BUILD_TYPE }}
    

    - name: Package
      run: |
        cd ${{github.workspace}}/build/${{env.BUILD_TYPE}}

        windeployqt.exe ${{env.targetName}}.exe

        $fileList = @("Qt6Network.dll","Qt6Pdf.dll","Qt6Svg.dll","opengl32sw.dll","translations","tls","generic","iconengines","networkinformation","D3Dcompiler_47.dll","imageformats/qgif.dll","imageformats/qicns.dll","imageformats/qico.dll","imageformats/qpdf.dll","imageformats/qsvg.dll","imageformats/qtga.dll","imageformats/qtiff.dll","imageformats/qwbmp.dll","imageformats/qwebp.dll")

        foreach($file in $fileList){
          if(Test-Path $file){
            Remove-Item $file -Recurse -Force
          }
        }
        $zipFileName = "${{env.targetName}}.zip"
        if(Test-Path $zipFileName){
          Remove-Item $zipFileName -Force
        }

        # contains the relative path to the file to be compressed
        Get-ChildItem -Path ./ | Compress-Archive -DestinationPath ${{env.targetName}}.zip

    - name: Release
      uses: softprops/action-gh-release@v1
      if: startsWith(github.ref, 'refs/tags/')
      with:
        files: |
          D:/a/Warcraft_sdu/Warcraft_sdu/build/Release/*.zip
          D:/a/Warcraft_sdu/Warcraft_sdu/build/Release/${{env.targetName}}_CLI.zip
          LICENSE
        tag_name: ${{github.ref}}
        body: |
          ${{github.ref}}
        draft: false
        prerelease: false
        token: ${{secrets.RELEASE_TOKEN}}